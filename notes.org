* GHC Language extensions
** High level
*** Part 1 --- Intro
**** What are language extensions?
**** Why are they necessary?
     - Haskell has a standard.
     - Compilers can extend the language features in the standard.
**** How do we use them?
     - Pragmas per file
     - Cabal file
     - command line
     - GHCi
*** Part 2 --- Basic examples
*** Part 3 --- Type classes
** Basic examples
*** ~InstanceSigs~
*** ~OverloadedStrings~
*** ~ScopedTypeVariables~
*** ~MultiWayIf~
*** ~LambdaCase~
*** ~TupleSections~
*** ~RecordWildCards~
*** ~GeneralizedNewtypeDeriving~
*** ~EmptyDataDeclarations~ for phantom types?
** Type class examples
*** ~FlexibleInstances~
*** ~FlexibleContexts~
*** ~MultiParameterTypeClasses~
*** ~UndecidableInstances~
** References
[[https://gist.github.com/rwbarton/dd8e51dce2a262d17a80][Flexible instances breaking things]]

[[https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/lang.html][GHC user guide]]

[[https://www.haskell.org/onlinereport/haskell2010/haskellch12.html#x19-19100012.3][Haskell 2010 report]]
